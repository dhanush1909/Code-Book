(this.webpackJsonpblog=this.webpackJsonpblog||[]).push([[0],{10:function(e,n,t){e.exports={Sidebar:"sidebar_Sidebar__1Qz_V",NavLink:"sidebar_NavLink__2vEOk"}},17:function(e,n,t){e.exports={Header:"header_Header__2o08c",Hamburger:"header_Hamburger__16rUP",Active:"header_Active__3SgKT"}},2:function(e,n,t){e.exports={Content:"solutions_Content__nkAw_",Question:"solutions_Question__11_8v",Answer:"solutions_Answer__1E7KC",QuestionDesc:"solutions_QuestionDesc__3wEM0",Solution:"solutions_Solution__72aF9",SolutionBlock:"solutions_SolutionBlock__ZbiMO",ProblemImage:"solutions_ProblemImage__M62Tk",SolutionImage:"solutions_SolutionImage__6p82a"}},21:function(e,n,t){e.exports={Logo:"logo_Logo__1mXpo",LogoImg:"logo_LogoImg__1-gSb"}},37:function(e,n,t){e.exports=t.p+"static/media/logo.0424a39d.png"},40:function(e,n,t){e.exports={Home:"home_Home__ruLji",Card:"home_Card__1r4pG"}},42:function(e,n,t){e.exports={Backdrop:"backdrop_Backdrop__9Ia71"}},43:function(e,n,t){e.exports=t.p+"static/media/running_sum_1d_array.eef876c5.png"},44:function(e,n,t){e.exports={CodeBlock:"codeBlock_CodeBlock__2zb1J"}},51:function(e,n,t){e.exports=t.p+"static/media/no-of-good-pairs.aeec7340.png"},52:function(e,n,t){e.exports=t.p+"static/media/maximum-subarray.9c1e348d.png"},524:function(e,n,t){"use strict";t.r(n);var a=t(0),i=t.n(a),r=t(36),s=t.n(r),l=(t(67),t(59)),o=(t(68),t(17)),c=t.n(o),m=t(21),u=t.n(m),p=t(37),d=t.n(p);function h(){return i.a.createElement("div",{className:u.a.Logo},i.a.createElement("img",{alt:"Code Book",src:d.a,className:u.a.LogoImg}),"Code Book")}function S(e){var n=e.showSideBar?c.a.Active:"",t=[c.a.Hamburger,n];return i.a.createElement("div",{className:c.a.Header},i.a.createElement("img",{className:t.join(" "),src:"https://img.icons8.com/ios-glyphs/120/000000/menu.png",alt:"menu",onClick:e.toggleMenu}),i.a.createElement(h,null))}var _=t(4),E=t(38),j=t(39),b=t(61),y=t(60),x=t(40),g=t.n(x),f=t(10),v=t.n(f);function N(){return i.a.createElement("div",{className:v.a.Sidebar},i.a.createElement("ul",null,i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Running-sum-of-1d-array"},i.a.createElement("li",null,"Running Sum of 1d Array")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Number-of-Good-Pairs"},i.a.createElement("li",null,"Number of Good Pairs")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Two-sum"},i.a.createElement("li",null,"Two sum")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Maximum-subarray"},i.a.createElement("li",null,"Maximum subarray")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Single-number"},i.a.createElement("li",null,"Single number")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Find-the-duplicate-number"},i.a.createElement("li",null,"Find the duplicate number")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Find-middle-of-linked-list"},i.a.createElement("li",null,"Find middle of linked list")),i.a.createElement(_.b,{className:v.a.NavLink+" navlink",to:"/problems/Fibonacci-number"},i.a.createElement("li",null,"Fibonacci number")),i.a.createElement("li",null,"Problem 4"),i.a.createElement("li",null,"Problem 5"),i.a.createElement("li",null,"Problem 6"),i.a.createElement("li",null,"Problem 7"),i.a.createElement("li",null,"Problem 8"),i.a.createElement("li",null,"Problem 9"),i.a.createElement("li",null,"Problem 10")))}var w=t(9),C=t.n(w),k=t(42),A=t.n(k);function B(e){return i.a.createElement("div",{className:A.a.Backdrop,onClick:e.hideSideBar})}var P=function(e){var n={transform:"translate("+(e.showMobileSideBar?"0%":"-100%")+")"};return i.a.createElement(i.a.Fragment,null,e.showMobileSideBar?i.a.createElement("div",{className:C.a.Backdrop},i.a.createElement(B,{hideSideBar:e.hideSideBar})):null,i.a.createElement("div",{className:C.a.Sidebar,style:n},i.a.createElement("ul",null,i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Running-sum-of-1d-array"},i.a.createElement("li",null,"Running Sum of 1d Array")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Number-of-Good-Pairs"},i.a.createElement("li",null,"Number of Good Pairs")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Two-sum"},i.a.createElement("li",null,"Two sum")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Maximum-subarray"},i.a.createElement("li",null,"Maximum subarray")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Single-number"},i.a.createElement("li",null,"Single number")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Find-the-duplicate-number"},i.a.createElement("li",null,"Find the duplicate number")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Find-middle-of-linked-list"},i.a.createElement("li",null,"Find middle of linked list")),i.a.createElement(_.b,{className:C.a.NavLink+" navlink",to:"/problems/Fibonacci-number"},i.a.createElement("li",null,"Fibonacci number")),i.a.createElement("li",null,"Problem 4"),i.a.createElement("li",null,"Problem 5"),i.a.createElement("li",null,"Problem 6"),i.a.createElement("li",null,"Problem 7"),i.a.createElement("li",null,"Problem 8"),i.a.createElement("li",null,"Problem 9"),i.a.createElement("li",null,"Problem 10"))))},O=t(2),M=t.n(O),T=t(43),L=t.n(T),I=t(44),G=t.n(I),H=t(24);function F(e){return i.a.createElement(H.b,{disabled:!0,language:"java",code:e.children},i.a.createElement(H.a,{className:G.a.CodeBlock}))}var D="\npublic int[] countSum(int[] Arr) {\n  int n = Arr.length;\n  for(int i=1;i<n;i++){\n    Arr[i]=Arr[i]+Arr[i-1];\n  }\n  return Arr;\n}\n".trim();function K(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Caluculate running sum of the array"),i.a.createElement("img",{alt:"Running sum of 1d array",className:M.a.ProblemImage,src:L.a}),i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"We will use the input array and modify it, and return it as the solution. That way, we don\u2019t have to create a new array. For every index of the array we need to add it with the previous index. Arr[i] = Arr[i] + Arr[i-1]."),i.a.createElement("div",null,i.a.createElement(F,null,D)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"Since we iterate over each element of array once the time complexity will be O(n)."))}var U=t(51),W=t.n(U),R="\npublic int numIdenticalPairs(int[] Arr) {\n  int n = Arr.length;\n  int count = 0;\n\n  for(int i=1;i<n-1;i++){\n    for(int j=i+1;j<n;j++){\n      if(Arr[i] == Arr[j]) count++; //increase count if both the elements are same.// \n    }\n  }\n  return count;\n}\n".trim(),q="\npublic int numIdenticalPairs(int[] Arr) {\n  int n = Arr.length;\n  int finalCount = 0;\n  int tempCount = 1;\n  Arrays.sort(Arr);\n\n  for(int i=0;i<n-1;i++){\n    if(Arr[i] == Arr[i+1]){\n        tempCount++;\n    } else {\n        finalCount += (tempCount * (tempCount - 1)) / 2;\n        tempCount = 1;\n    }\n  }\n\n  /* if tempCount is > 1 then we need to \n  add the no of pairs to the finalCount */\n  finalCount += (tempCount * (tempCount - 1)) / 2;\n  return finalCount;\n}\n".trim(),Q="\npublic int countSum(int[] Arr) {\n  int finalCount = 0;\n  int[] frequency = new int[101];\n\n  for(int i=0;i<Arr.length;i++){\n\n      // add the count of the number at index i to the final count //\n      finalCount += frequency[Arr[i]];\n\n      // increment the number in the frequency array //\n      frequency[Arr[i]]++;\n  }\n\n  return finalCount;\n}\n".trim();function V(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Number of Good Pairs"),i.a.createElement("img",{alt:"Number of Good Pairs",className:M.a.ProblemImage,src:W.a}),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Brute force approach. For every index loop through the array to find a match. Increment the count if 2 index have same value."),i.a.createElement("div",null,i.a.createElement(F,null,R)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n",i.a.createElement("sup",null,"2"),")"," "),"Since we use 2 for loops time complexity will be O(n",i.a.createElement("sup",null,"2"),").")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},"In this approach we will first sort the array. Then we will compare each index with the next index. Arr[i] == Arr[i+1]. If both are same then we will increae the tempCount by 1. If both are different then we will the number of pairs that can be formed using the temp count and add it to the finalCount."," ",i.a.createElement("code",null,"(tempCount * (tempCount - 1)) / 2"),". Then we will set tempCount to 1."),i.a.createElement("div",null,i.a.createElement(F,null,q)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(nlogn) "),"Best sorting algorith has time complexity of O(nlogn). After sorting we iterate over the array once so O(n). Hence the final complexity will be O(nlogn).")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 3:"),i.a.createElement("div",{className:M.a.Answer},"For this solution we need to create an frequency array that counts the number of occurence of a number. At every iteration we add the count of the number in that index to the final count.",i.a.createElement("code",null," finalCount += frequency[Arr[i]];")),i.a.createElement("div",null,i.a.createElement(F,null,Q)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"Since we iterate over each element of array once the time complexity will be O(n).")))}var z=t(52),J=t.n(z),X="\npublic int maximumSubarray(int[] Arr) {\n  int n = Arr.length;\n  int max = Integer.MIN_VALUE;\n\n  for(int i=1;i<n-1;i++){\n    int sum = 0;\n    for(int j=i;j<n;j++){ //start the loop from ith index\n      sum += Arr[j]; \n    }    \n    max = Math.max(max,sum);\n  }\n  return max;\n}\n".trim(),Y="\npublic int numIdenticalPairs(int[] Arr) {\n  int n = Arr.length;\n  int max = Integer.MIN_VALUE;\n  int sum = 0;\n\n  for(int i=0;i<n;i++){\n    sum = sum + a[i]; //add the current element to the sum.\n\n    if (max < sum) //Update max to store curreent maximum sum\n      max = sum; \n\n    if (sum < 0) //if sum is negative set it to zero\n      sum = 0; \n  } \n  return max;\n}\n".trim();function Z(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Maximum Subarray"),i.a.createElement("img",{alt:"Maximum Subarray",className:M.a.ProblemImage,src:J.a}),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Brute force approach. Find the sum of all the sub arrays and update maxSum. For every index loop through the array and calculate the maxSum. Check for max after calculating sum of each subarray."),i.a.createElement("div",null,i.a.createElement(F,null,X)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n",i.a.createElement("sup",null,"2"),")"," "),"Since we use 2 for loops time complexity will be O(n",i.a.createElement("sup",null,"2"),").")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Kadane's algorithm: "),"In this algorithm we use 2 variables to store maximum_sum and sum_so_far. We iterate over the array once, at each iteration we add the number to sum_so_far and update max if"," ",i.a.createElement("code",null,"max < sum_so_far"),". Then we check if"," ",i.a.createElement("code",null,"sum_so_far < 0")," then we set sum_so_far to 0."),i.a.createElement("div",null,i.a.createElement(F,null,Y)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n). Hence the final complexity will be O(nlogn).")))}var $=t(53),ee=t.n($),ne="\npublic int maximumSubarray(int[] Arr) {\n  int n = Arr.length;\n\n  for(int i=1;i<n-1;i++){\n    for(int j=i;j<n;j++){ \n      if(!search(Arr, Arr[i],i,n))\n        return Arr[i];\n    }    \n  }\n  return 0;\n}\n\npublic Boolean search(int[] Arr, int number, int index,int n) {\n    for(int i=0;i<n;i++) {\n        if(i == index)\n            continue;\n        if(Arr[i] == num)\n            return true;\n    }\n    return false;\n}\n".trim(),te="\npublic int singleNumber(int[] nums) {\n    HashMap<Integer, Integer> hash_table = new HashMap<>();\n\n    for (int i : nums) {\n      hash_table.put(i, hash_table.getOrDefault(i, 0) + 1);\n    }\n    for (int i : nums) {\n      if (hash_table.get(i) == 1) {\n        return i;\n      }\n    }\n    return 0;\n}\n".trim(),ae="\nclass Solution {\n    public int singleNumber(int[] nums) {\n      int sumOfSet = 0, sumOfNums = 0;\n      Set<Integer> set = new HashSet();\n  \n      for (int num : nums) {\n        if (!set.contains(num)) {\n          set.add(num);\n          sumOfSet += num;\n        }\n        sumOfNums += num;\n      }\n      return 2 * sumOfSet - sumOfNums;\n    }\n}\n".trim(),ie="\npublic int singleNumber(int[] nums) {\n    int a = 0;\n    for (int i : nums) {\n      a ^= i;\n    }\n    return a;\n}\n".trim();function re(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Single Number"),i.a.createElement("img",{alt:"Single Number",className:M.a.ProblemImage,src:ee.a}),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Brute force approach. Use 2 loops. For each index loop through the entire array to check if number exists only once."),i.a.createElement("div",null,i.a.createElement(F,null,ne)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n",i.a.createElement("sup",null,"2"),")"," "),"Since we use 2 for loops time complexity will be O(n",i.a.createElement("sup",null,"2"),").")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},"Using HashMap: Iterate over the array. For every index check if the number existes in the map. If it does not exist in the set then add it to the map and set value to 1. If it exists then increase the value by 1. Iterate through the map keys and reeturn the key that has value 1."),i.a.createElement("div",null,i.a.createElement(F,null,te)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n).",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n) "),"The space required by hashmap is equal to the number of elements in the array.")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 3:"),i.a.createElement("div",{className:M.a.Answer},"using math: concept - 2 \u2217 (a+b+c) \u2212 (a+a+b+b+c) = c. ",i.a.createElement("br",null),"use HashSet to keep track of the number that is already added."),i.a.createElement("div",null,i.a.createElement(F,null,ae)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n).",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n) ")," set needs space for the elements in nums.")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 4:"),i.a.createElement("div",{className:M.a.Answer},"using XOR: concept - a^a = 0, \xa0 a^b^a = b",i.a.createElement("br",null),"Loop through the array and do XOR operation on each index."),i.a.createElement("div",null,i.a.createElement(F,null,ie)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n).",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(1) ")," We use constant extra space.")))}var se=t(54),le=t.n(se),oe="\npublic int findDuplicate(int[] Arr) {\n  int n = Arr.length;\n\n  for(int i=0;i<n;i++){\n    int count = 0;\n    for(int j=0;j<n;j++){ \n      if(Arr[j] == Arr[i])\n        count++; \n    }    \n    if(count == 2)\n        return Arr[i];\n  }\n  return -1;\n}\n".trim(),ce="\npublic int findDuplicate(int[] Arr) {\n  int n = Arr.length;\n  HashSet<Integer> numbers = new HashSet<>();\n\n  for(int i=0;i<n;i++){\n    if(!numbers.contains(Arr[i])) {\n        numbers.add(Arr[i]);  //Add to HashSet\n    } else {\n        return Arr[i]; //duplicate number\n    }\n  } \n  return -1;\n}\n".trim(),me='\npublic static int findDuplicate(int[] Arr) \n{ \n    // Find the intersection  \n    // point of the slow and fast. \n    int slow = arr[0]; \n    int fast = arr[0]; \n    \n    do {\n        slow = Arr[slow];\n        fast = Arr[fast];\n    } while (slow != fast);\n    \n    // Find the "entrance" \n    // to the cycle. \n    int slow = arr[0]; \n    while (slow != fast)  \n    { \n        slow = arr[slow]; \n        fast = arr[fast]; \n    } \n  \n    return slow; \n} \n'.trim();function ue(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Maximum Subarray"),i.a.createElement("img",{alt:"Maximum Subarray",className:M.a.ProblemImage,src:le.a}),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Brute force approach. Use 2 loops, for every index check if the number present in the array twice."),i.a.createElement("div",null,i.a.createElement(F,null,oe)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n",i.a.createElement("sup",null,"2"),")"," "),"Since we use 2 for loops time complexity will be O(n",i.a.createElement("sup",null,"2"),").")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Using HashSet:")," \xa0 Loop through the array once. If number is not present in the HashSet add it to the set. If the number is  already present in the list it's a duplicate number."),i.a.createElement("div",null,i.a.createElement(F,null,ce)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n). Hence the final complexity will be O(nlogn).",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n) "))),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 3:"),i.a.createElement("div",{className:M.a.Answer},"Firstly, the constraints of this problem imply that a cycle must exist. Because each number in an array arr[] is between 1 and n, it will necessarily point to an index that exists. Therefore, the list can be traversed infinitely, which implies that there is a cycle. Additionally, because 0 cannot appear as a value in an array arr[], arr[0] cannot be part of the cycle. Therefore, traversing the array in this manner from arr[0] is equivalent to traversing a cyclic linked list."),i.a.createElement("div",null,i.a.createElement(F,null,me)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n). Hence the final complexity will be O(nlogn).",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(1) ")," We do not use any extra space.")))}var pe="\nvoid findMiddle() \n{ \n    ListNode node = head;  \n    int count = 0;\n    while (node != null) \n    { \n        count++;\n        node = node.next;\n    } \n    for(int i=0; i<count/2;i++) {\n        head = head.next;\n    }\n    return head;\n}\n".trim(),de="\nvoid findMiddle() \n{ \n    count = 0;\n\n    // ListNode is representation of the linked list.\n    ArrayList<ListNode> list = new ArrayList<>(); \n\n    while(head != null) {\n        list.add(head);\n        count++;\n        head = head.next;\n    }\n\n    // if linked list was empty return null\n    return count == 0 ? null : list.get(count/2);\n}\n".trim(),he="\nvoid findMiddle() \n{ \n    ListNode slow = head;\n    ListNode fast = head;\n    \n    while(fast!=null && fast.next!=null)\n    {\n        slow=slow.next;\n        fast= fast.next.next;\n    }\n    \n    return slow;\n}\n".trim();function Se(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Middle of the Linked List"),i.a.createElement("div",{className:M.a.QuestionDesc},"Given a singly linked list, find middle of the linked list. For example, if given linked list is 1->2->3->4->5 then output should be 3. If there are even nodes, then there would be two middle nodes, we need to print second middle element. For example, if given linked list is 1->2->3->4->5->6 then output should be 4."),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Traverse the whole linked list and count the no. of nodes. Now traverse the list again till count/2 and return the node at count/2."),i.a.createElement("div",null,i.a.createElement(F,null,pe)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n + n/2)"))),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Using ArrayList:")," \xa0 Traverse the whole linked list. Increment the count and add the node to array list. Return the node at count/2 position in ArrayList"),i.a.createElement("div",null,i.a.createElement(F,null,de)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n)"),i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n)"))),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 3:"),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Using 2 pointers:")," Use a slow and fast pointer. Slow pointer will move ahead by 1 node and fast pointeer will move ahead by 2 nodes. When fast pointer reaches the end of the list slow pointer will be at the middle node."),i.a.createElement("div",null,i.a.createElement(F,null,he)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(1) ")," We do not use any extra space.")))}var _e=t(55),Ee=t.n(_e),je="\npublic int maximumSubarray(int[] Arr, int target) {\n  int n = Arr.length;\n\n  for(int i=0;i<n;i++){\n    for(int j=i+1;j<n;j++){ \n      if(Arr[i] + Arr[j] == target)\n        return new int[] {j, i};\n    }    \n  }\n  return new int[] {-1,-1};\n}\n".trim(),be="\npublic int singleNumber(int[] nums, int target) {\n    int n = nums.length;\n    Map<Integer, Integer> map = new HashMap<>();\n    for (int i = 0; i < nums.length; i++) {\n        int complement = target - nums[i];\n        if(map.containsKey(complement))\n            return new int[] {map.get(complement), i};\n        map.put(nums[i], i);\n    }\n}\n".trim();function ye(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Two Sum"),i.a.createElement("img",{alt:"Single Number",className:M.a.ProblemImage,src:Ee.a}),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Brute force approach. Use 2 loops. For each index find if it's complement is present in the array."),i.a.createElement("div",null,i.a.createElement(F,null,je)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n",i.a.createElement("sup",null,"2"),")"," "),"Since we use 2 for loops time complexity will be O(n",i.a.createElement("sup",null,"2"),").")),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},"Using HashMap: Iterate over the array. For every index check if the compliment of the number existes in the map. If it does not then return the array of value and index. else add the number as key and index as value to the Map."),i.a.createElement("div",null,i.a.createElement(F,null,be)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"we iterate over the array once so O(n).",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n) "),"The space required by hashmap is equal to the number of elements in the array.")))}var xe=t(56),ge=t.n(xe),fe=t(57),ve=t.n(fe),Ne=t(58),we=t.n(Ne),Ce="\npublic int fib(int N) {\n    if (N <= 1) {\n        return N;\n    }\n    return fib(N-1) + fib(N-2);\n}\n".trim(),ke="\npublic int fib(int N) {\n    int[] dp = new int[N+1];\n    return rec(N,dp);\n}\n\npublic int rec(int n, int[] dp) {\n    if(n == 0) return 0;\n    if(n == 1) return 1;\n    if(dp[n] != 0) return dp[n];\n    \n    dp[n] = rec(n - 1,dp) + rec(n - 2,dp);\n    return dp[n];\n}\n".trim(),Ae="\npublic int fib(int N) {\n    if (N <= 1) {\n        return N;\n    }\n    return memoize(N);\n}\n\npublic int memoize(int N) {\n  int[] cache = new int[N + 1];\n  cache[1] = 1;\n\n  for (int i = 2; i <= N; i++) {\n      cache[i] = cache[i-1] + cache[i-2];\n  }\n  return cache[N];\n}\n".trim();function Be(){return i.a.createElement("div",{className:M.a.Content},i.a.createElement("div",{className:M.a.Question},"Fibonacci number"),i.a.createElement("img",{alt:"Fibonacci number",className:M.a.ProblemImage,src:ge.a}),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 1:"),i.a.createElement("div",{className:M.a.Answer},"Use recursion to compute the Fibonacci number of a given integer.",i.a.createElement("ul",null,i.a.createElement("li",null,"Check if the provided input value, N, is less than or equal to 1. If true, return N."),i.a.createElement("li",null,"Otherwise, the function fib(int N) calls itself, with the result of the 2 previous numbers being added to each other, passed in as the argument. This is derived directly from the recurrence relation: fib(n) = fib(n - 1) + fib(n - 2);"),i.a.createElement("li",null,"Do this until all numbers have been computed, then return the resulting answer.")),i.a.createElement("img",{alt:"Fibonacci number",className:M.a.SolutionImage,src:ve.a})),i.a.createElement("div",null,i.a.createElement(F,null,Ce)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(2",i.a.createElement("sup",null,"n"),")"," "),"We start the computation from the top node and go down the tree until we reach the base case. From the recursive tree, we can notice that at each level the number of nodes is equal to twice the number of nodes in the previous level. At root, there is only 1 node but at the 1st level there are 2 nodes and then 4,8,16 and so on. For fib of 10 the time complexities will be 2\xb9\u2070 since we need to go 10 levels deep and at each level the number of nodes doubles because of the branching logic. From this pattern, we can conclude that the time complexity is O(2",i.a.createElement("sup",null,"n"),").",i.a.createElement("b",null,"Space Complexity: O(n) "))),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 2:"),i.a.createElement("div",{className:M.a.Answer},"Optimizing a brute force recursive problem starts by identifying the repeating subproblems. From the above recursive chart, we can notice that the 4th, 3rd, 2nd Fibonacci numbers are computed more than once. If we store the result of these computations we can avoid finding the value more than once. ",i.a.createElement("br",null),i.a.createElement("img",{alt:"Fibonacci number",className:M.a.SolutionImage,src:we.a}),i.a.createElement("br",null),"In the above diagram, all nodes in blue are computed once, the nodes in yellow are reused and the nodes in red are not computed. ",i.a.createElement("br",null),"By using an array to store the already computed values reduces the number of recursive calls made. This reduces the time complexity from exponential to linear."),i.a.createElement("div",null,i.a.createElement(F,null,ke)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),"The number of recursive calls made is reduced to 2 x n which reduces the time complexity to O(2n), by eliminating the constant the time complexity is O(n)",i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n) "))),i.a.createElement("div",{className:M.a.SolutionBlock},i.a.createElement("div",{className:M.a.Solution},"Solution 3:"),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("ul",null,i.a.createElement("li",null,"If N is less than or equal to 1, return N"),i.a.createElement("li",null,"Otherwise, iterate through N, storing each computed answer in an array along the way."),i.a.createElement("li",null,"Use this array as a reference to the 2 previous numbers to calculate the current Fibonacci number."),i.a.createElement("li",null,"Once we've reached the last number, return it's Fibonacci number."))),i.a.createElement("div",null,i.a.createElement(F,null,Ae)),i.a.createElement("div",{className:M.a.Answer},i.a.createElement("b",null,"Time Complexity: O(n) "),i.a.createElement("br",null),i.a.createElement("b",null,"Space Complexity: O(n) ")," We use array to store the values.")))}var Pe=t(3),Oe=function(e){Object(b.a)(t,e);var n=Object(y.a)(t);function t(){return Object(E.a)(this,t),n.apply(this,arguments)}return Object(j.a)(t,[{key:"render",value:function(){return i.a.createElement("div",{className:g.a.Home},i.a.createElement(N,null),i.a.createElement(P,{hideSideBar:this.props.hideSideBar,showMobileSideBar:this.props.showMobileSideBar}),i.a.createElement(Pe.d,null,i.a.createElement(Pe.b,{path:"/",exact:!0}),i.a.createElement(Pe.b,{path:"/home",exact:!0}),i.a.createElement(Pe.b,{path:"/problems/Running-sum-of-1d-array",exact:!0},i.a.createElement(K,null)),i.a.createElement(Pe.b,{path:"/problems/Number-of-Good-Pairs",exact:!0},i.a.createElement(V,null)),i.a.createElement(Pe.b,{path:"/problems/Two-sum",exact:!0},i.a.createElement(ye,null)),i.a.createElement(Pe.b,{path:"/problems/Maximum-subarray",exact:!0},i.a.createElement(Z,null)),i.a.createElement(Pe.b,{path:"/problems/Single-number",exact:!0},i.a.createElement(re,null)),i.a.createElement(Pe.b,{path:"/problems/Find-the-duplicate-number",exact:!0},i.a.createElement(ue,null)),i.a.createElement(Pe.b,{path:"/problems/Find-middle-of-linked-list",exact:!0},i.a.createElement(Se,null)),i.a.createElement(Pe.b,{path:"/problems/Fibonacci-number",exact:!0},i.a.createElement(Be,null))),i.a.createElement(Pe.a,{to:"/problems/Running-sum-of-1d-array"}))}}]),t}(a.Component);var Me=function(){var e=Object(a.useState)(!1),n=Object(l.a)(e,2),t=n[0],r=n[1],s=function(){console.log("clicked"),r(!t)};return i.a.createElement(_.a,{basename:"/code-book"},i.a.createElement("div",{className:"App"},i.a.createElement(S,{toggleMenu:s,sideBarShown:t,showSideBar:t}),i.a.createElement(Oe,{hideSideBar:s,showMobileSideBar:t})))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(Me,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))},53:function(e,n,t){e.exports=t.p+"static/media/single-number.4907a280.png"},54:function(e,n,t){e.exports=t.p+"static/media/find-the-duplicate-number.09c87fcc.png"},55:function(e,n,t){e.exports=t.p+"static/media/two-sum.c6b3f74e.png"},56:function(e,n,t){e.exports=t.p+"static/media/fibonacci-number.ae510e43.png"},57:function(e,n,t){e.exports=t.p+"static/media/fib-tree.fcfe91ce.png"},58:function(e,n,t){e.exports=t.p+"static/media/fib-tree-dp.5c1aa46d.png"},62:function(e,n,t){e.exports=t(524)},67:function(e,n,t){},68:function(e,n,t){},89:function(e,n,t){var a={"./Binary_Property/ASCII.js":90,"./Binary_Property/ASCII_Hex_Digit.js":91,"./Binary_Property/Alphabetic.js":92,"./Binary_Property/Any.js":93,"./Binary_Property/Assigned.js":94,"./Binary_Property/Bidi_Control.js":95,"./Binary_Property/Bidi_Mirrored.js":96,"./Binary_Property/Case_Ignorable.js":97,"./Binary_Property/Cased.js":98,"./Binary_Property/Changes_When_Casefolded.js":99,"./Binary_Property/Changes_When_Casemapped.js":100,"./Binary_Property/Changes_When_Lowercased.js":101,"./Binary_Property/Changes_When_NFKC_Casefolded.js":102,"./Binary_Property/Changes_When_Titlecased.js":103,"./Binary_Property/Changes_When_Uppercased.js":104,"./Binary_Property/Dash.js":105,"./Binary_Property/Default_Ignorable_Code_Point.js":106,"./Binary_Property/Deprecated.js":107,"./Binary_Property/Diacritic.js":108,"./Binary_Property/Emoji.js":109,"./Binary_Property/Emoji_Component.js":110,"./Binary_Property/Emoji_Modifier.js":111,"./Binary_Property/Emoji_Modifier_Base.js":112,"./Binary_Property/Emoji_Presentation.js":113,"./Binary_Property/Extended_Pictographic.js":114,"./Binary_Property/Extender.js":115,"./Binary_Property/Grapheme_Base.js":116,"./Binary_Property/Grapheme_Extend.js":117,"./Binary_Property/Hex_Digit.js":118,"./Binary_Property/IDS_Binary_Operator.js":119,"./Binary_Property/IDS_Trinary_Operator.js":120,"./Binary_Property/ID_Continue.js":121,"./Binary_Property/ID_Start.js":122,"./Binary_Property/Ideographic.js":123,"./Binary_Property/Join_Control.js":124,"./Binary_Property/Logical_Order_Exception.js":125,"./Binary_Property/Lowercase.js":126,"./Binary_Property/Math.js":127,"./Binary_Property/Noncharacter_Code_Point.js":128,"./Binary_Property/Pattern_Syntax.js":129,"./Binary_Property/Pattern_White_Space.js":130,"./Binary_Property/Quotation_Mark.js":131,"./Binary_Property/Radical.js":132,"./Binary_Property/Regional_Indicator.js":133,"./Binary_Property/Sentence_Terminal.js":134,"./Binary_Property/Soft_Dotted.js":135,"./Binary_Property/Terminal_Punctuation.js":136,"./Binary_Property/Unified_Ideograph.js":137,"./Binary_Property/Uppercase.js":138,"./Binary_Property/Variation_Selector.js":139,"./Binary_Property/White_Space.js":140,"./Binary_Property/XID_Continue.js":141,"./Binary_Property/XID_Start.js":142,"./General_Category/Cased_Letter.js":143,"./General_Category/Close_Punctuation.js":144,"./General_Category/Connector_Punctuation.js":145,"./General_Category/Control.js":146,"./General_Category/Currency_Symbol.js":147,"./General_Category/Dash_Punctuation.js":148,"./General_Category/Decimal_Number.js":149,"./General_Category/Enclosing_Mark.js":150,"./General_Category/Final_Punctuation.js":151,"./General_Category/Format.js":152,"./General_Category/Initial_Punctuation.js":153,"./General_Category/Letter.js":154,"./General_Category/Letter_Number.js":155,"./General_Category/Line_Separator.js":156,"./General_Category/Lowercase_Letter.js":157,"./General_Category/Mark.js":158,"./General_Category/Math_Symbol.js":159,"./General_Category/Modifier_Letter.js":160,"./General_Category/Modifier_Symbol.js":161,"./General_Category/Nonspacing_Mark.js":162,"./General_Category/Number.js":163,"./General_Category/Open_Punctuation.js":164,"./General_Category/Other.js":165,"./General_Category/Other_Letter.js":166,"./General_Category/Other_Number.js":167,"./General_Category/Other_Punctuation.js":168,"./General_Category/Other_Symbol.js":169,"./General_Category/Paragraph_Separator.js":170,"./General_Category/Private_Use.js":171,"./General_Category/Punctuation.js":172,"./General_Category/Separator.js":173,"./General_Category/Space_Separator.js":174,"./General_Category/Spacing_Mark.js":175,"./General_Category/Surrogate.js":176,"./General_Category/Symbol.js":177,"./General_Category/Titlecase_Letter.js":178,"./General_Category/Unassigned.js":179,"./General_Category/Uppercase_Letter.js":180,"./Script/Adlam.js":181,"./Script/Ahom.js":182,"./Script/Anatolian_Hieroglyphs.js":183,"./Script/Arabic.js":184,"./Script/Armenian.js":185,"./Script/Avestan.js":186,"./Script/Balinese.js":187,"./Script/Bamum.js":188,"./Script/Bassa_Vah.js":189,"./Script/Batak.js":190,"./Script/Bengali.js":191,"./Script/Bhaiksuki.js":192,"./Script/Bopomofo.js":193,"./Script/Brahmi.js":194,"./Script/Braille.js":195,"./Script/Buginese.js":196,"./Script/Buhid.js":197,"./Script/Canadian_Aboriginal.js":198,"./Script/Carian.js":199,"./Script/Caucasian_Albanian.js":200,"./Script/Chakma.js":201,"./Script/Cham.js":202,"./Script/Cherokee.js":203,"./Script/Chorasmian.js":204,"./Script/Common.js":205,"./Script/Coptic.js":206,"./Script/Cuneiform.js":207,"./Script/Cypriot.js":208,"./Script/Cyrillic.js":209,"./Script/Deseret.js":210,"./Script/Devanagari.js":211,"./Script/Dives_Akuru.js":212,"./Script/Dogra.js":213,"./Script/Duployan.js":214,"./Script/Egyptian_Hieroglyphs.js":215,"./Script/Elbasan.js":216,"./Script/Elymaic.js":217,"./Script/Ethiopic.js":218,"./Script/Georgian.js":219,"./Script/Glagolitic.js":220,"./Script/Gothic.js":221,"./Script/Grantha.js":222,"./Script/Greek.js":223,"./Script/Gujarati.js":224,"./Script/Gunjala_Gondi.js":225,"./Script/Gurmukhi.js":226,"./Script/Han.js":227,"./Script/Hangul.js":228,"./Script/Hanifi_Rohingya.js":229,"./Script/Hanunoo.js":230,"./Script/Hatran.js":231,"./Script/Hebrew.js":232,"./Script/Hiragana.js":233,"./Script/Imperial_Aramaic.js":234,"./Script/Inherited.js":235,"./Script/Inscriptional_Pahlavi.js":236,"./Script/Inscriptional_Parthian.js":237,"./Script/Javanese.js":238,"./Script/Kaithi.js":239,"./Script/Kannada.js":240,"./Script/Katakana.js":241,"./Script/Kayah_Li.js":242,"./Script/Kharoshthi.js":243,"./Script/Khitan_Small_Script.js":244,"./Script/Khmer.js":245,"./Script/Khojki.js":246,"./Script/Khudawadi.js":247,"./Script/Lao.js":248,"./Script/Latin.js":249,"./Script/Lepcha.js":250,"./Script/Limbu.js":251,"./Script/Linear_A.js":252,"./Script/Linear_B.js":253,"./Script/Lisu.js":254,"./Script/Lycian.js":255,"./Script/Lydian.js":256,"./Script/Mahajani.js":257,"./Script/Makasar.js":258,"./Script/Malayalam.js":259,"./Script/Mandaic.js":260,"./Script/Manichaean.js":261,"./Script/Marchen.js":262,"./Script/Masaram_Gondi.js":263,"./Script/Medefaidrin.js":264,"./Script/Meetei_Mayek.js":265,"./Script/Mende_Kikakui.js":266,"./Script/Meroitic_Cursive.js":267,"./Script/Meroitic_Hieroglyphs.js":268,"./Script/Miao.js":269,"./Script/Modi.js":270,"./Script/Mongolian.js":271,"./Script/Mro.js":272,"./Script/Multani.js":273,"./Script/Myanmar.js":274,"./Script/Nabataean.js":275,"./Script/Nandinagari.js":276,"./Script/New_Tai_Lue.js":277,"./Script/Newa.js":278,"./Script/Nko.js":279,"./Script/Nushu.js":280,"./Script/Nyiakeng_Puachue_Hmong.js":281,"./Script/Ogham.js":282,"./Script/Ol_Chiki.js":283,"./Script/Old_Hungarian.js":284,"./Script/Old_Italic.js":285,"./Script/Old_North_Arabian.js":286,"./Script/Old_Permic.js":287,"./Script/Old_Persian.js":288,"./Script/Old_Sogdian.js":289,"./Script/Old_South_Arabian.js":290,"./Script/Old_Turkic.js":291,"./Script/Oriya.js":292,"./Script/Osage.js":293,"./Script/Osmanya.js":294,"./Script/Pahawh_Hmong.js":295,"./Script/Palmyrene.js":296,"./Script/Pau_Cin_Hau.js":297,"./Script/Phags_Pa.js":298,"./Script/Phoenician.js":299,"./Script/Psalter_Pahlavi.js":300,"./Script/Rejang.js":301,"./Script/Runic.js":302,"./Script/Samaritan.js":303,"./Script/Saurashtra.js":304,"./Script/Sharada.js":305,"./Script/Shavian.js":306,"./Script/Siddham.js":307,"./Script/SignWriting.js":308,"./Script/Sinhala.js":309,"./Script/Sogdian.js":310,"./Script/Sora_Sompeng.js":311,"./Script/Soyombo.js":312,"./Script/Sundanese.js":313,"./Script/Syloti_Nagri.js":314,"./Script/Syriac.js":315,"./Script/Tagalog.js":316,"./Script/Tagbanwa.js":317,"./Script/Tai_Le.js":318,"./Script/Tai_Tham.js":319,"./Script/Tai_Viet.js":320,"./Script/Takri.js":321,"./Script/Tamil.js":322,"./Script/Tangut.js":323,"./Script/Telugu.js":324,"./Script/Thaana.js":325,"./Script/Thai.js":326,"./Script/Tibetan.js":327,"./Script/Tifinagh.js":328,"./Script/Tirhuta.js":329,"./Script/Ugaritic.js":330,"./Script/Vai.js":331,"./Script/Wancho.js":332,"./Script/Warang_Citi.js":333,"./Script/Yezidi.js":334,"./Script/Yi.js":335,"./Script/Zanabazar_Square.js":336,"./Script_Extensions/Adlam.js":337,"./Script_Extensions/Ahom.js":338,"./Script_Extensions/Anatolian_Hieroglyphs.js":339,"./Script_Extensions/Arabic.js":340,"./Script_Extensions/Armenian.js":341,"./Script_Extensions/Avestan.js":342,"./Script_Extensions/Balinese.js":343,"./Script_Extensions/Bamum.js":344,"./Script_Extensions/Bassa_Vah.js":345,"./Script_Extensions/Batak.js":346,"./Script_Extensions/Bengali.js":347,"./Script_Extensions/Bhaiksuki.js":348,"./Script_Extensions/Bopomofo.js":349,"./Script_Extensions/Brahmi.js":350,"./Script_Extensions/Braille.js":351,"./Script_Extensions/Buginese.js":352,"./Script_Extensions/Buhid.js":353,"./Script_Extensions/Canadian_Aboriginal.js":354,"./Script_Extensions/Carian.js":355,"./Script_Extensions/Caucasian_Albanian.js":356,"./Script_Extensions/Chakma.js":357,"./Script_Extensions/Cham.js":358,"./Script_Extensions/Cherokee.js":359,"./Script_Extensions/Chorasmian.js":360,"./Script_Extensions/Common.js":361,"./Script_Extensions/Coptic.js":362,"./Script_Extensions/Cuneiform.js":363,"./Script_Extensions/Cypriot.js":364,"./Script_Extensions/Cyrillic.js":365,"./Script_Extensions/Deseret.js":366,"./Script_Extensions/Devanagari.js":367,"./Script_Extensions/Dives_Akuru.js":368,"./Script_Extensions/Dogra.js":369,"./Script_Extensions/Duployan.js":370,"./Script_Extensions/Egyptian_Hieroglyphs.js":371,"./Script_Extensions/Elbasan.js":372,"./Script_Extensions/Elymaic.js":373,"./Script_Extensions/Ethiopic.js":374,"./Script_Extensions/Georgian.js":375,"./Script_Extensions/Glagolitic.js":376,"./Script_Extensions/Gothic.js":377,"./Script_Extensions/Grantha.js":378,"./Script_Extensions/Greek.js":379,"./Script_Extensions/Gujarati.js":380,"./Script_Extensions/Gunjala_Gondi.js":381,"./Script_Extensions/Gurmukhi.js":382,"./Script_Extensions/Han.js":383,"./Script_Extensions/Hangul.js":384,"./Script_Extensions/Hanifi_Rohingya.js":385,"./Script_Extensions/Hanunoo.js":386,"./Script_Extensions/Hatran.js":387,"./Script_Extensions/Hebrew.js":388,"./Script_Extensions/Hiragana.js":389,"./Script_Extensions/Imperial_Aramaic.js":390,"./Script_Extensions/Inherited.js":391,"./Script_Extensions/Inscriptional_Pahlavi.js":392,"./Script_Extensions/Inscriptional_Parthian.js":393,"./Script_Extensions/Javanese.js":394,"./Script_Extensions/Kaithi.js":395,"./Script_Extensions/Kannada.js":396,"./Script_Extensions/Katakana.js":397,"./Script_Extensions/Kayah_Li.js":398,"./Script_Extensions/Kharoshthi.js":399,"./Script_Extensions/Khitan_Small_Script.js":400,"./Script_Extensions/Khmer.js":401,"./Script_Extensions/Khojki.js":402,"./Script_Extensions/Khudawadi.js":403,"./Script_Extensions/Lao.js":404,"./Script_Extensions/Latin.js":405,"./Script_Extensions/Lepcha.js":406,"./Script_Extensions/Limbu.js":407,"./Script_Extensions/Linear_A.js":408,"./Script_Extensions/Linear_B.js":409,"./Script_Extensions/Lisu.js":410,"./Script_Extensions/Lycian.js":411,"./Script_Extensions/Lydian.js":412,"./Script_Extensions/Mahajani.js":413,"./Script_Extensions/Makasar.js":414,"./Script_Extensions/Malayalam.js":415,"./Script_Extensions/Mandaic.js":416,"./Script_Extensions/Manichaean.js":417,"./Script_Extensions/Marchen.js":418,"./Script_Extensions/Masaram_Gondi.js":419,"./Script_Extensions/Medefaidrin.js":420,"./Script_Extensions/Meetei_Mayek.js":421,"./Script_Extensions/Mende_Kikakui.js":422,"./Script_Extensions/Meroitic_Cursive.js":423,"./Script_Extensions/Meroitic_Hieroglyphs.js":424,"./Script_Extensions/Miao.js":425,"./Script_Extensions/Modi.js":426,"./Script_Extensions/Mongolian.js":427,"./Script_Extensions/Mro.js":428,"./Script_Extensions/Multani.js":429,"./Script_Extensions/Myanmar.js":430,"./Script_Extensions/Nabataean.js":431,"./Script_Extensions/Nandinagari.js":432,"./Script_Extensions/New_Tai_Lue.js":433,"./Script_Extensions/Newa.js":434,"./Script_Extensions/Nko.js":435,"./Script_Extensions/Nushu.js":436,"./Script_Extensions/Nyiakeng_Puachue_Hmong.js":437,"./Script_Extensions/Ogham.js":438,"./Script_Extensions/Ol_Chiki.js":439,"./Script_Extensions/Old_Hungarian.js":440,"./Script_Extensions/Old_Italic.js":441,"./Script_Extensions/Old_North_Arabian.js":442,"./Script_Extensions/Old_Permic.js":443,"./Script_Extensions/Old_Persian.js":444,"./Script_Extensions/Old_Sogdian.js":445,"./Script_Extensions/Old_South_Arabian.js":446,"./Script_Extensions/Old_Turkic.js":447,"./Script_Extensions/Oriya.js":448,"./Script_Extensions/Osage.js":449,"./Script_Extensions/Osmanya.js":450,"./Script_Extensions/Pahawh_Hmong.js":451,"./Script_Extensions/Palmyrene.js":452,"./Script_Extensions/Pau_Cin_Hau.js":453,"./Script_Extensions/Phags_Pa.js":454,"./Script_Extensions/Phoenician.js":455,"./Script_Extensions/Psalter_Pahlavi.js":456,"./Script_Extensions/Rejang.js":457,"./Script_Extensions/Runic.js":458,"./Script_Extensions/Samaritan.js":459,"./Script_Extensions/Saurashtra.js":460,"./Script_Extensions/Sharada.js":461,"./Script_Extensions/Shavian.js":462,"./Script_Extensions/Siddham.js":463,"./Script_Extensions/SignWriting.js":464,"./Script_Extensions/Sinhala.js":465,"./Script_Extensions/Sogdian.js":466,"./Script_Extensions/Sora_Sompeng.js":467,"./Script_Extensions/Soyombo.js":468,"./Script_Extensions/Sundanese.js":469,"./Script_Extensions/Syloti_Nagri.js":470,"./Script_Extensions/Syriac.js":471,"./Script_Extensions/Tagalog.js":472,"./Script_Extensions/Tagbanwa.js":473,"./Script_Extensions/Tai_Le.js":474,"./Script_Extensions/Tai_Tham.js":475,"./Script_Extensions/Tai_Viet.js":476,"./Script_Extensions/Takri.js":477,"./Script_Extensions/Tamil.js":478,"./Script_Extensions/Tangut.js":479,"./Script_Extensions/Telugu.js":480,"./Script_Extensions/Thaana.js":481,"./Script_Extensions/Thai.js":482,"./Script_Extensions/Tibetan.js":483,"./Script_Extensions/Tifinagh.js":484,"./Script_Extensions/Tirhuta.js":485,"./Script_Extensions/Ugaritic.js":486,"./Script_Extensions/Vai.js":487,"./Script_Extensions/Wancho.js":488,"./Script_Extensions/Warang_Citi.js":489,"./Script_Extensions/Yezidi.js":490,"./Script_Extensions/Yi.js":491,"./Script_Extensions/Zanabazar_Square.js":492,"./index.js":493,"./unicode-version.js":494};function i(e){var n=r(e);return t(n)}function r(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=r,e.exports=i,i.id=89},9:function(e,n,t){e.exports={Sidebar:"sideBarMobile_Sidebar__1iVyM",NavLink:"sideBarMobile_NavLink__1OAdA",Backdrop:"sideBarMobile_Backdrop__3ocfn"}}},[[62,1,2]]]);
//# sourceMappingURL=main.e4dc7d83.chunk.js.map